        
		How to add data to student, create a seperate class: Comparator is used for customized sorting
		
		List<Student> student = new ArrayList<>();
        student.add(new Student(23, "Sai"));
		
		Comparator:
		
		Comparator<Student> c1 = new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                if(o1.getAge()<o2.getAge()){
                    return -1;
                }
                return 1;
            }
        };
		//or we can just 
		Collections.sort(student,c1); */
       // Collections.sort(student, new MyComparator());
        //Collections.sort(student,(o1,o2)->1); //this is comparator without writing any class or method, o1 & o2 are automatcailly generated 
        Collections.sort(student,(o1,o2)->{
            if(o1.getAge()<o2.getAge()){
                return -1;
            }
            else if (o1.getAge()>o2.getAge()) {
                return 1;
            }
            return 0;
        });
        System.out.println(student);
    }
}
// Comparator by using additional
/*
class MyComparator implements Comparator <Student>{
    @Override
    public int compare(Student o1, Student o2) {
        if(o1.getAge()<o2.getAge()){
            return -1;
        }
        else if (o1.getAge()>o2.getAge()) {
            return 1;
        }
        return 0;
    }
	
	Sorting:
	
	Collections.sort(l1);//Natural sorting order Ascending
        System.out.println(l1);
        Collections.sort(l1, (o1, o2) -> -1); //Customized sorting order in desc -1/ equals 0 / asc 1 using Comparator
        System.out.println(l1);

        l1.stream().sorted().forEach(System.out::println); //Ascending order new line
        System.out.println("\n"); //This is for blank space

        l1.stream().sorted((o1, o2) -> 1).forEach(System.out::println); //Descending order
        System.out.println("\n");
        l1.stream().sorted(Comparator.naturalOrder()).forEach(System.out::println); //Ascending order new line
        System.out.println("\n"); //This is for blank space
        l1.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println); //Descending order new line
        System.out.println("\n"); //This is for blank space
		
